# --------------------------------------------------------------------------------------------------------------------
# kitodo page config
# header style an js files
# --------------------------------------------------------------------------------------------------------------------


page {
  includeCSS {
        kitodo = {$config.kitodo.css.lists}
        kitodo.media = screen,projection
    }
    # we need jquery in head as it is used by pageview plugin
    # --> jQuery must be provided by Kitodo.Presentation --> include Template "Basis Configuration"
    includeJSFooterlibs {
        kitodo-frontend = EXT:slub_digitalcollections/Resources/Public/JavaScript/DigitalcollectionsListScripts.js
    }
}

[page["backend_layout"] == 'pagets__kitodo' or page["backend_layout"] == 'pagets__emptyworkview']
    config.disableWrapInBaseClass = 1

    # switch to viewer css
    page.includeCSS.kitodo = {$config.kitodo.css.pageview}

    # switch to viewer js
    page.includeJSFooterlibs.kitodo = EXT:slub_digitalcollections/Resources/Public/JavaScript/DigitalcollectionsScripts.js

    # clear not required js
    page.includeJSFooterlibs.kitodo-frontend >

[global]

# --------------------------------------------------------------------------------------------------------------------
# add opengraph social metatags in single view with a valid id
# --------------------------------------------------------------------------------------------------------------------
[traverse(request.getQueryParams(), 'tx_dlf/id') > 0]

  page.2 = LOAD_REGISTER
  page.2 {

    pageUrlDigital {
      cObject = COA
      cObject {
        10 = TEXT
        10 {
          dataWrap = DB:tx_dlf_documents:{GP:tx_dlf|id}:purl
          wrap3={|}
          insertData=1
        }
        20 = TEXT
        20 {
          data = GP:tx_dlf|page
          required = 1
          wrap=/|
        }
      }
    }

    currentTitle {
      cObject = TEXT
      cObject {
        dataWrap = DB:tx_dlf_documents:{GP:tx_dlf|id}:title
        wrap3={|}
        insertData=1
      }
    }

    # sometimes partOf is set...
    partOf {
      cObject = TEXT
      cObject {
        dataWrap = DB:tx_dlf_documents:{GP:tx_dlf|id}:partof
        wrap3={|}
        insertData=1
      }
    }

    partOfTitle {
      cObject = TEXT
      cObject {
        dataWrap = DB:tx_dlf_documents:{register:partOf}:title
        wrap3={|}
        insertData=1
      }
    }

    # sometimes partOfpartOf (root anchor) is set...
    partOfPartOf {
      cObject = TEXT
      cObject {
        dataWrap = DB:tx_dlf_documents:{register:partOf}:partof
        wrap3={|}
        insertData=1
      }
    }

    partOfPartOfTitle {
      cObject = TEXT
      cObject {
        dataWrap = DB:tx_dlf_documents:{register:partOfPartOf}:title
        wrap3={|}
        insertData=1
      }
    }

    # if year is set
    yearDate {
      cObject = TEXT
      cObject {
        dataWrap = DB:tx_dlf_documents:{GP:tx_dlf|id}:year
        wrap3={|}
        insertData=1
      }
    }

    postDescription {
      cObject = COA
      cObject {
        10 = CONTENT
        10 {
          table = tx_dlf_documents
          select {
            pidInList = {$config.kitodo.storagePid}
            selectFields=title,author,year,place
            where=uid=###postid###
            markers {
              postid.data = register:partOf
            }
          }

          renderObj=COA
          renderObj {
            10 = TEXT
            10 {
              field = author
              stdWrap.if.isTrue.field = author
              stdWrap.noTrimWrap = ||: |
            }
            20 = TEXT
            20 {
              field = title
              stdWrap.if.isTrue.field = title
              stdWrap.noTrimWrap = ||, |
            }
            30 = TEXT
            30 {
              field = place
              stdWrap.if.isTrue.field = place
            }
            40 = TEXT
            40 {
              field = year
              stdWrap.if.isTrue.field = year
              stdWrap.noTrimWrap = |, ||
            }
          }
        }

        20 = CONTENT
        20 {

          table = tx_dlf_documents
          select {
            pidInList = {$config.kitodo.storagePid}
            selectFields=title,author,year,place
            where=uid=###postid###
            markers {
              # would work, but we want the year too...
              #postid.data = register:partOf // GP:tx_dlf|id
              postid.data = GP:tx_dlf|id
            }
          }

          renderObj=COA
          renderObj {
            10 = TEXT
            10 {
              field = author
              stdWrap.if.isTrue.field = author
              stdWrap.noTrimWrap = ||: |
            }
            20 = TEXT
            20 {
              field = title
              stdWrap.if.isTrue.field = title
              stdWrap.noTrimWrap = ||, |
            }
            30 = TEXT
            30 {
              field = place
              stdWrap.if.isTrue.field = place
            }
            40 = TEXT
            40 {
              field = year
              stdWrap.if.isTrue.field = year
              stdWrap.noTrimWrap = | | |
            }
          }
        }
      }
    }

    postTitle {
      cObject = COA
      cObject {
          10 = TEXT
          10.data = register:currentTitle

          20 = TEXT
          20.data = register:partOfTitle
          20.required = 1
          20.noTrimWrap = | | |

          25 = TEXT
          25.data = register:partOfPartOfTitle
          25.required = 1
          25.noTrimWrap = | | |
      }
    }
  }


  # overwrite page title:
  config.noPageTitle = 2
  page.headerData.10 >
  page.headerData.10 = TEXT
  page.headerData.10 {
    wrap = <title> | </title>
    value = {$config.kitodo.rootPage.title}: {register:postTitle}
    insertData = 1
    htmlSpecialChars = 1
  }

  # overwrite page.meta.description with blog teaser
  page.meta.description.data = register:postDescription

  page.headerData.300 = COA
  page.headerData.300 {
    10 = TEXT
    10.value (
       <meta property="og:type" content="website" />
    )

    11 = TEXT
    11 {
      data = register:postDescription
      wrap = <meta property="og:description" content="|" />
      required = {register:postDescription}
      trim = 1
      htmlSpecialChars = 1
      htmlSpecialChars.preserveEntities = 1
    }

    12 = TEXT
    12 {
      data = register:postTitle
      wrap = <meta property="og:title" content="|" />
      required = {register:postTitle}
      trim = 1
      htmlSpecialChars = 1
      htmlSpecialChars.preserveEntities = 1
    }

    13 = TEXT
    13 {
      data = register:pageUrlDigital
      wrap = <link rel="canonical" href="|" />
      required = {register:pageUrlDigital}
      trim = 1
      htmlSpecialChars = 1
      htmlSpecialChars.preserveEntities = 1
    }

    14 = TEXT
    14 {
      data = register:pageUrlDigital
      wrap = <meta property="og:url" content="|" />
      required = {register:pageUrlDigital}
      trim = 1
      htmlSpecialChars = 1
      htmlSpecialChars.preserveEntities = 1
    }

  }

[END]
